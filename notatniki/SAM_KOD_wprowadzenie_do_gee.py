# -*- coding: utf-8 -*-
"""Wprowadzenie_do_GEE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VjM7VZ3RoTBIKpP-UPpRWg8w3ImAVUWe

##Inicjalizacja GEE
"""

import ee
import geemap
ee.Authenticate()
ee.Initialize(project='ee-mrzeszewski')

"""## Kolekcje danych

W GEE dane zabrane są w kolekcje obrazów (ImageCollection) i obiektów (FeatureCollection) - raster/wektor
"""

# ImageCollection - warstwy rastrowe
populacja = ee.ImageCollection("WorldPop/GP/100m/pop") #kolekcja obrazów

mapka=geemap.Map() #incjalizacja mapy - wywołanie resetuje obiekt

#parametry wizualne w postaci słownika
vis_params={
    'min':0, #wartość rastra przypisana pierwszemu kolorowi z palety
    'max':5, #wartość rastra przypisana ostatniemu kolorowi z palety
    #'palette':['red','green','blue'] #piewszy sposób określenia palety - nazwy kolorów
    # 'palette':'inferno' #nazwa palety
    'palette':'viridis' #inna paleta
    #można też kolory szesnatkowo (RRGGBB lub RRGGBBAA) wg. CSS3
}

mapka.addLayer(populacja,vis_params=vis_params,name="Populacja") #dodanie warstwy do mapy

mapka #wyświetlenie mapy

#FeatureCollection - warstwy wektorowe

granice_panstw=ee.FeatureCollection("FAO/GAUL_SIMPLIFIED_500m/2015/level0")

mapka=geemap.Map() #incjalizacja mapy - wywołanie resetuje obiekt

vis_params={
    'color':'blue',
    'width':2,
    'lineType':'solid',
    'fillColor':'00000000'
}

mapka.addLayer(granice_panstw,vis_params=vis_params,name="Granice państw") #dodanie warstwy do mapy

mapka #wyświetlenie mapy

"""## Pozyskiwanie informacji o zbiorze danych"""

print(populacja.size().getInfo()) #funkcja getinifo() powoduje wykonanie działania na serwerze

display(populacja.size()) #display to funkcja wyższego rzędu niz print - "próbuje" wyświetlić dane w jak najlepszy sposób

display(populacja.limit(2).getInfo())

#Pozyskiwanie informacji o zbiorze obiektów

# display(granice_panstw.limit(2).getInfo())

display(granice_panstw.propertyNames()) #nazwy atrybutów dla kolekcji

display(granice_panstw.first().propertyNames()) #nazwy atrybutów dla pierwszego obiektu z kolekcji

display(granice_panstw.aggregate_array('STATUS')) #wartości dla kolumny STATUS dla wszystkich obiektów

display(granice_panstw.aggregate_array('ADM0_NAME'))

"""## FILTROWANIE DANYCH"""

copernicus = ee.ImageCollection('COPERNICUS/S2_HARMONIZED')

# display(copernicus.size())

roi = ee.Geometry.Rectangle([20.85, 52.08, 21.27, 52.37]) #przybliżony BBOX  Warszawy

warszawa=copernicus.filterBounds(roi) #filtruje kolekcje do geometrii (zdefiniowane jako roi)

warszawa2019=warszawa.filterDate('2019-01-01','2020-01-01') #filtruje kolekcje do okresu daty - rok 2019

warszawa2024=warszawa.filterDate('2024-01-01','2025-01-01') #filtruje kolekcje do okresu daty - rok 2019

warszawa2019_bez_chmur=warszawa2019.filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',1)) #filtruje kolekcje do okresu daty - rok 2019

warszawa2024_bez_chmur=warszawa2024.filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',1)) #filtruje kolekcje do okresu daty - rok 2019

#A tak można filtrować za jednym razem

#przeciwukośnik "\" oznacza że następna linijka traktowana jest takjakby była dalszym ciagiem polecenia
warszawa2019_bez_chmur2=warszawa.filterDate('2019-01-01','2020-01-01') \
.filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',1)) \
.filterBounds(roi)


vis_params={
    'bands':['B4','B3','B2'], #wybór pasm B4 B3 i B2 to RGB - obraz widzialny
    'min':0,
    'max':3000
}

mapka=geemap.Map() #incjalizacja mapy - wywołanie resetuje obiekt

mapka.addLayer(warszawa2019_bez_chmur,vis_params=vis_params, name="2019") #dodanie warstwy do mapy
mapka.addLayer(warszawa2024_bez_chmur,vis_params=vis_params, name="2024")

# mapka.addLayer(roi,{'color':'red'},'roi') #dodanie warstwy do mapy

mapka.centerObject(roi,10) #ustawienie środka mapy na roi i poziom powiększenia 10

mapka #wyświetlenie mapy

# FILTROWANIE WG. METADANYCH

granica_polski=granice_panstw.filter(ee.Filter.eq('ADM0_NAME','Poland'))

mapka=geemap.Map() #incjalizacja mapy - wywołanie resetuje obiekt

mapka.addLayer(granica_polski, name="Granice Polski") #dodanie warstwy do mapy

mapka #wyświetlenie mapy